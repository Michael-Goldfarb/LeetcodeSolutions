class Solution:
    def numWays(self, words: List[str], target: str) -> int:
        MOD = 10**9 + 7
        m, n = len(words), len(words[0])
        t_len = len(target)
        
        # Frequency array to count character occurrences at each index
        freq = [defaultdict(int) for _ in range(n)]
        
        # Precompute frequencies of each character at each index
        for word in words:
            for i, char in enumerate(word):
                freq[i][char] += 1

        # Memoized recursive function
        @lru_cache(None)
        def dp(i, j):
            # Base case: if we've formed the entire target
            if i == t_len:
                return 1
            # If we've exhausted all positions in words
            if j == n:
                return 0
            
            # Don't use current position
            res = dp(i, j + 1) % MOD
            
            # Use current position if character matches target[i]
            if target[i] in freq[j]:
                res += freq[j][target[i]] * dp(i + 1, j + 1)
                res %= MOD
            
            return res
        
        # Start from target index 0 and word index 0
        return dp(0, 0)